// Mocks generated by Mockito 5.0.12 from annotations
// in deall/test/consumer/infrastructure/favourite_retailer_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:io' as _i9;

import 'package:dartz/dartz.dart' as _i2;
import 'package:deall/auth/application/app_user.dart' as _i6;
import 'package:deall/auth/application/auth_failure.dart' as _i7;
import 'package:deall/auth/infrastructure/auth_repository.dart' as _i4;
import 'package:deall/consumer/infrastructure/favourite_retailer_remote_service.dart'
    as _i10;
import 'package:deall/core/application/retailer/retailer.dart' as _i8;
import 'package:deall/core/infrastructure/retailer/retailer_dto.dart' as _i11;
import 'package:firebase_auth/firebase_auth.dart' as _i12;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeAddressCheckResult extends _i1.Fake
    implements _i3.AddressCheckResult {}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i4.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i6.AppUser?> getFirebaseUser() => (super.noSuchMethod(
      Invocation.method(#getFirebaseUser, []),
      returnValue: Future<_i6.AppUser?>.value()) as _i5.Future<_i6.AppUser?>);
  @override
  String getUserId() =>
      (super.noSuchMethod(Invocation.method(#getUserId, []), returnValue: '')
          as String);
  @override
  _i5.Future<_i2.Either<_i7.AuthFailure, _i6.AppUser>> signIn(
          {String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signIn, [], {#email: email, #password: password}),
          returnValue: Future<_i2.Either<_i7.AuthFailure, _i6.AppUser>>.value(
              _FakeEither<_i7.AuthFailure, _i6.AppUser>())) as _i5
          .Future<_i2.Either<_i7.AuthFailure, _i6.AppUser>>);
  @override
  _i5.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>> consumerSignUp(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #consumerSignUp, [], {#email: email, #password: password}),
              returnValue: Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>.value(
                  _FakeEither<_i7.AuthFailure, _i2.Unit>()))
          as _i5.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>);
  @override
  _i5.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>> retailerSignUp(
          {String? email,
          String? password,
          _i8.Retailer? retailer,
          _i9.File? imageFile}) =>
      (super.noSuchMethod(
              Invocation.method(#retailerSignUp, [], {
                #email: email,
                #password: password,
                #retailer: retailer,
                #imageFile: imageFile
              }),
              returnValue: Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>.value(
                  _FakeEither<_i7.AuthFailure, _i2.Unit>()))
          as _i5.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>);
  @override
  _i5.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>.value(
                  _FakeEither<_i7.AuthFailure, _i2.Unit>()))
          as _i5.Future<_i2.Either<_i7.AuthFailure, _i2.Unit>>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i3.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.AddressCheckOptions> get addresses =>
      (super.noSuchMethod(Invocation.getter(#addresses),
              returnValue: <_i3.AddressCheckOptions>[])
          as List<_i3.AddressCheckOptions>);
  @override
  set addresses(List<_i3.AddressCheckOptions>? _addresses) =>
      super.noSuchMethod(Invocation.setter(#addresses, _addresses),
          returnValueForMissingStub: null);
  @override
  Duration get checkInterval =>
      (super.noSuchMethod(Invocation.getter(#checkInterval),
          returnValue: _FakeDuration()) as Duration);
  @override
  set checkInterval(Duration? _checkInterval) =>
      super.noSuchMethod(Invocation.setter(#checkInterval, _checkInterval),
          returnValueForMissingStub: null);
  @override
  _i5.Future<bool> get hasConnection =>
      (super.noSuchMethod(Invocation.getter(#hasConnection),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(Invocation.getter(#connectionStatus),
              returnValue: Future<_i3.InternetConnectionStatus>.value(
                  _i3.InternetConnectionStatus.connected))
          as _i5.Future<_i3.InternetConnectionStatus>);
  @override
  _i5.Stream<_i3.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(Invocation.getter(#onStatusChange),
              returnValue: Stream<_i3.InternetConnectionStatus>.empty())
          as _i5.Stream<_i3.InternetConnectionStatus>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get isActivelyChecking =>
      (super.noSuchMethod(Invocation.getter(#isActivelyChecking),
          returnValue: false) as bool);
  @override
  _i5.Future<_i3.AddressCheckResult> isHostReachable(
          _i3.AddressCheckOptions? options) =>
      (super.noSuchMethod(Invocation.method(#isHostReachable, [options]),
              returnValue: Future<_i3.AddressCheckResult>.value(
                  _FakeAddressCheckResult()))
          as _i5.Future<_i3.AddressCheckResult>);
}

/// A class which mocks [FavouriteRetailerRemoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavouriteRetailerRemoteService extends _i1.Mock
    implements _i10.FavouriteRetailerRemoteService {
  MockFavouriteRetailerRemoteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i11.RetailerDTO>> getFavouriteRetailers(String? userId) =>
      (super.noSuchMethod(Invocation.method(#getFavouriteRetailers, [userId]),
              returnValue:
                  Future<List<_i11.RetailerDTO>>.value(<_i11.RetailerDTO>[]))
          as _i5.Future<List<_i11.RetailerDTO>>);
  @override
  _i5.Future<void> updateFavouriteRetailerList(
          {List<String>? retailerIdList, String? userId}) =>
      (super.noSuchMethod(
          Invocation.method(#updateFavouriteRetailerList, [],
              {#retailerIdList: retailerIdList, #userId: userId}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [FirebaseException].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockFirebaseException extends _i1.Mock implements _i12.FirebaseException {
  MockFirebaseException() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get plugin =>
      (super.noSuchMethod(Invocation.getter(#plugin), returnValue: '')
          as String);
  @override
  String get code =>
      (super.noSuchMethod(Invocation.getter(#code), returnValue: '') as String);
  @override
  String toString() => super.toString();
}
