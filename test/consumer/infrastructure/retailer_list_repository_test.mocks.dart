// Mocks generated by Mockito 5.0.12 from annotations
// in deall/test/consumer/infrastructure/retailer_list_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:deall/consumer/infrastructure/retailer_list_repository.dart'
    as _i3;
import 'package:deall/core/application/retailer/retailer.dart' as _i6;
import 'package:deall/core/infrastructure/firestore_failures.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [RetailerListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRetailerListRepository extends _i1.Mock
    implements _i3.RetailerListRepository {
  MockRetailerListRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FirestoreFailures, List<_i6.Retailer>>>
      getRetailerList() => (super.noSuchMethod(
          Invocation.method(#getRetailerList, []),
          returnValue: Future<
                  _i2.Either<_i5.FirestoreFailures, List<_i6.Retailer>>>.value(
              _FakeEither<_i5.FirestoreFailures, List<_i6.Retailer>>())) as _i4
          .Future<_i2.Either<_i5.FirestoreFailures, List<_i6.Retailer>>>);
}

/// A class which mocks [FirestoreFailures].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreFailures extends _i1.Mock implements _i5.FirestoreFailures {
  MockFirestoreFailures() {
    _i1.throwOnMissingStub(this);
  }

  @override
  TResult when<TResult extends Object?>(
          {TResult Function()? cancelledOperation,
          TResult Function()? objectNotFound,
          TResult Function()? unknown,
          TResult Function()? noConnection}) =>
      (super.noSuchMethod(
          Invocation.method(#when, [], {
            #cancelledOperation: cancelledOperation,
            #objectNotFound: objectNotFound,
            #unknown: unknown,
            #noConnection: noConnection
          }),
          returnValue: null) as TResult);
  @override
  TResult maybeWhen<TResult extends Object?>(
          {TResult Function()? cancelledOperation,
          TResult Function()? objectNotFound,
          TResult Function()? unknown,
          TResult Function()? noConnection,
          TResult Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#maybeWhen, [], {
            #cancelledOperation: cancelledOperation,
            #objectNotFound: objectNotFound,
            #unknown: unknown,
            #noConnection: noConnection,
            #orElse: orElse
          }),
          returnValue: null) as TResult);
  @override
  TResult map<TResult extends Object?>(
          {TResult Function(_i5.CancelledOperation)? cancelledOperation,
          TResult Function(_i5.ObjectNotFound)? objectNotFound,
          TResult Function(_i5.Unknown)? unknown,
          TResult Function(_i5.NoConnection)? noConnection}) =>
      (super.noSuchMethod(
          Invocation.method(#map, [], {
            #cancelledOperation: cancelledOperation,
            #objectNotFound: objectNotFound,
            #unknown: unknown,
            #noConnection: noConnection
          }),
          returnValue: null) as TResult);
  @override
  TResult maybeMap<TResult extends Object?>(
          {TResult Function(_i5.CancelledOperation)? cancelledOperation,
          TResult Function(_i5.ObjectNotFound)? objectNotFound,
          TResult Function(_i5.Unknown)? unknown,
          TResult Function(_i5.NoConnection)? noConnection,
          TResult Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#maybeMap, [], {
            #cancelledOperation: cancelledOperation,
            #objectNotFound: objectNotFound,
            #unknown: unknown,
            #noConnection: noConnection,
            #orElse: orElse
          }),
          returnValue: null) as TResult);
}
