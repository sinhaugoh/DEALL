// Mocks generated by Mockito 5.0.12 from annotations
// in deall/test/consumer/infrastructure/retailer_list_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:deall/consumer/infrastructure/firestore_failures.dart' as _i6;
import 'package:deall/consumer/infrastructure/retailer_list_remote_service.dart'
    as _i4;
import 'package:deall/core/application/retailer.dart' as _i2;
import 'package:deall/core/infrastructure/retailer_dto.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _Fake$RetailerCopyWith<$Res> extends _i1.Fake
    implements _i2.$RetailerCopyWith<$Res> {}

class _Fake$RetailerDTOCopyWith<$Res> extends _i1.Fake
    implements _i3.$RetailerDTOCopyWith<$Res> {}

class _FakeRetailer extends _i1.Fake implements _i2.Retailer {}

/// A class which mocks [RetailerListRemoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRetailerListRemoteService extends _i1.Mock
    implements _i4.RetailerListRemoteService {
  MockRetailerListRemoteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.RetailerDTO>> getRetailerList() => (super.noSuchMethod(
          Invocation.method(#getRetailerList, []),
          returnValue: Future<List<_i3.RetailerDTO>>.value(<_i3.RetailerDTO>[]))
      as _i5.Future<List<_i3.RetailerDTO>>);
}

/// A class which mocks [FirestoreFailures].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreFailures extends _i1.Mock implements _i6.FirestoreFailures {
  MockFirestoreFailures() {
    _i1.throwOnMissingStub(this);
  }

  @override
  TResult when<TResult extends Object?>(
          {TResult Function()? cancelledOperation,
          TResult Function()? objectNotFound,
          TResult Function()? unknown}) =>
      (super.noSuchMethod(
          Invocation.method(#when, [], {
            #cancelledOperation: cancelledOperation,
            #objectNotFound: objectNotFound,
            #unknown: unknown
          }),
          returnValue: null) as TResult);
  @override
  TResult maybeWhen<TResult extends Object?>(
          {TResult Function()? cancelledOperation,
          TResult Function()? objectNotFound,
          TResult Function()? unknown,
          TResult Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#maybeWhen, [], {
            #cancelledOperation: cancelledOperation,
            #objectNotFound: objectNotFound,
            #unknown: unknown,
            #orElse: orElse
          }),
          returnValue: null) as TResult);
  @override
  TResult map<TResult extends Object?>(
          {TResult Function(_i6.CancelledOperation)? cancelledOperation,
          TResult Function(_i6.ObjectNotFound)? objectNotFound,
          TResult Function(_i6.Unknown)? unknown}) =>
      (super.noSuchMethod(
          Invocation.method(#map, [], {
            #cancelledOperation: cancelledOperation,
            #objectNotFound: objectNotFound,
            #unknown: unknown
          }),
          returnValue: null) as TResult);
  @override
  TResult maybeMap<TResult extends Object?>(
          {TResult Function(_i6.CancelledOperation)? cancelledOperation,
          TResult Function(_i6.ObjectNotFound)? objectNotFound,
          TResult Function(_i6.Unknown)? unknown,
          TResult Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#maybeMap, [], {
            #cancelledOperation: cancelledOperation,
            #objectNotFound: objectNotFound,
            #unknown: unknown,
            #orElse: orElse
          }),
          returnValue: null) as TResult);
}

/// A class which mocks [Retailer].
///
/// See the documentation for Mockito's code generation for more information.
class MockRetailer extends _i1.Mock implements _i2.Retailer {
  MockRetailer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  String get block =>
      (super.noSuchMethod(Invocation.getter(#block), returnValue: '')
          as String);
  @override
  String get street =>
      (super.noSuchMethod(Invocation.getter(#street), returnValue: '')
          as String);
  @override
  String get unit =>
      (super.noSuchMethod(Invocation.getter(#unit), returnValue: '') as String);
  @override
  String get postalCode =>
      (super.noSuchMethod(Invocation.getter(#postalCode), returnValue: '')
          as String);
  @override
  String get operatingHours =>
      (super.noSuchMethod(Invocation.getter(#operatingHours), returnValue: '')
          as String);
  @override
  bool get visibility =>
      (super.noSuchMethod(Invocation.getter(#visibility), returnValue: false)
          as bool);
  @override
  _i2.$RetailerCopyWith<_i2.Retailer> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$RetailerCopyWith<_i2.Retailer>())
          as _i2.$RetailerCopyWith<_i2.Retailer>);
  @override
  String addressLine() =>
      (super.noSuchMethod(Invocation.method(#addressLine, []), returnValue: '')
          as String);
}

/// A class which mocks [RetailerDTO].
///
/// See the documentation for Mockito's code generation for more information.
class MockRetailerDTO extends _i1.Mock implements _i3.RetailerDTO {
  MockRetailerDTO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  String get block =>
      (super.noSuchMethod(Invocation.getter(#block), returnValue: '')
          as String);
  @override
  String get street =>
      (super.noSuchMethod(Invocation.getter(#street), returnValue: '')
          as String);
  @override
  String get unit =>
      (super.noSuchMethod(Invocation.getter(#unit), returnValue: '') as String);
  @override
  String get postalCode =>
      (super.noSuchMethod(Invocation.getter(#postalCode), returnValue: '')
          as String);
  @override
  String get operatingHours =>
      (super.noSuchMethod(Invocation.getter(#operatingHours), returnValue: '')
          as String);
  @override
  bool get visibility =>
      (super.noSuchMethod(Invocation.getter(#visibility), returnValue: false)
          as bool);
  @override
  _i3.$RetailerDTOCopyWith<_i3.RetailerDTO> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$RetailerDTOCopyWith<_i3.RetailerDTO>())
          as _i3.$RetailerDTOCopyWith<_i3.RetailerDTO>);
  @override
  _i2.Retailer toDomain() =>
      (super.noSuchMethod(Invocation.method(#toDomain, []),
          returnValue: _FakeRetailer()) as _i2.Retailer);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [FirebaseException].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockFirebaseException extends _i1.Mock implements _i7.FirebaseException {
  MockFirebaseException() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get plugin =>
      (super.noSuchMethod(Invocation.getter(#plugin), returnValue: '')
          as String);
  @override
  String get code =>
      (super.noSuchMethod(Invocation.getter(#code), returnValue: '') as String);
  @override
  String toString() => super.toString();
}
