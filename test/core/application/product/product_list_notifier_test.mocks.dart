// Mocks generated by Mockito 5.0.12 from annotations
// in deall/test/core/application/product/product_list_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:deall/core/application/product/product.dart' as _i6;
import 'package:deall/core/infrastructure/firestore_failures.dart' as _i5;
import 'package:deall/retailer/product/infrastructure/product_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i3.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FirestoreFailures, List<_i6.Product>>>
      getProductList(String? retailerId) => (super.noSuchMethod(
          Invocation.method(#getProductList, [retailerId]),
          returnValue: Future<
                  _i2.Either<_i5.FirestoreFailures, List<_i6.Product>>>.value(
              _FakeEither<_i5.FirestoreFailures, List<_i6.Product>>())) as _i4
          .Future<_i2.Either<_i5.FirestoreFailures, List<_i6.Product>>>);
  @override
  _i4.Stream<_i2.Either<_i5.FirestoreFailures, List<_i6.Product>>>
      getProductStream() => (super.noSuchMethod(
              Invocation.method(#getProductStream, []),
              returnValue: Stream<
                  _i2.Either<_i5.FirestoreFailures, List<_i6.Product>>>.empty())
          as _i4.Stream<_i2.Either<_i5.FirestoreFailures, List<_i6.Product>>>);
  @override
  String generateNewProductId(String? uid) =>
      (super.noSuchMethod(Invocation.method(#generateNewProductId, [uid]),
          returnValue: '') as String);
  @override
  _i4.Future<_i2.Either<_i5.FirestoreFailures, void>> addProduct(
          _i6.Product? newProduct, String? uid) =>
      (super.noSuchMethod(Invocation.method(#addProduct, [newProduct, uid]),
          returnValue: Future<_i2.Either<_i5.FirestoreFailures, void>>.value(
              _FakeEither<_i5.FirestoreFailures, void>())) as _i4
          .Future<_i2.Either<_i5.FirestoreFailures, void>>);
  @override
  _i4.Future<_i2.Either<_i5.FirestoreFailures, _i2.Unit>> updateProduct(
          _i6.Product? product) =>
      (super.noSuchMethod(Invocation.method(#updateProduct, [product]),
              returnValue:
                  Future<_i2.Either<_i5.FirestoreFailures, _i2.Unit>>.value(
                      _FakeEither<_i5.FirestoreFailures, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.FirestoreFailures, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.FirestoreFailures, _i2.Unit>> deleteProduct(
          _i6.Product? product) =>
      (super.noSuchMethod(Invocation.method(#deleteProduct, [product]),
              returnValue:
                  Future<_i2.Either<_i5.FirestoreFailures, _i2.Unit>>.value(
                      _FakeEither<_i5.FirestoreFailures, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.FirestoreFailures, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.FirestoreFailures, _i2.Unit>> updateProductList(
          List<_i6.Product>? productList) =>
      (super.noSuchMethod(Invocation.method(#updateProductList, [productList]),
              returnValue:
                  Future<_i2.Either<_i5.FirestoreFailures, _i2.Unit>>.value(
                      _FakeEither<_i5.FirestoreFailures, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.FirestoreFailures, _i2.Unit>>);
}
