// Mocks generated by Mockito 5.0.12 from annotations
// in deall/test/auth/infrastructure/auth_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:io' as _i9;

import 'package:deall/auth/infrastructure/firebase_auth_service.dart' as _i4;
import 'package:deall/auth/infrastructure/initial_user_creation_service.dart'
    as _i6;
import 'package:deall/core/infrastructure/image_picking_remote_service.dart'
    as _i8;
import 'package:deall/core/infrastructure/retailer/retailer_dto.dart' as _i7;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUserCredential extends _i1.Fake implements _i2.UserCredential {}

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeAddressCheckResult extends _i1.Fake
    implements _i3.AddressCheckResult {}

class _FakeUserMetadata extends _i1.Fake implements _i2.UserMetadata {}

class _FakeIdTokenResult extends _i1.Fake implements _i2.IdTokenResult {}

class _FakeConfirmationResult extends _i1.Fake
    implements _i2.ConfirmationResult {}

class _FakeUser extends _i1.Fake implements _i2.User {}

/// A class which mocks [FirebaseAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthService extends _i1.Mock
    implements _i4.FirebaseAuthService {
  MockFirebaseAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.User?> getFirebaseUser() =>
      (super.noSuchMethod(Invocation.method(#getFirebaseUser, []),
          returnValue: Future<_i2.User?>.value()) as _i5.Future<_i2.User?>);
  @override
  String getUserId() =>
      (super.noSuchMethod(Invocation.method(#getUserId, []), returnValue: '')
          as String);
  @override
  _i5.Future<_i2.UserCredential> signIn({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signIn, [], {#email: email, #password: password}),
          returnValue:
              Future<_i2.UserCredential>.value(_FakeUserCredential())) as _i5
          .Future<_i2.UserCredential>);
  @override
  _i5.Future<_i2.UserCredential> consumerSignUp(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #consumerSignUp, [], {#email: email, #password: password}),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential()))
          as _i5.Future<_i2.UserCredential>);
  @override
  _i5.Future<_i2.UserCredential> retailerSignUp(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #retailerSignUp, [], {#email: email, #password: password}),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential()))
          as _i5.Future<_i2.UserCredential>);
  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [InitialUserCreationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitialUserCreationService extends _i1.Mock
    implements _i6.InitialUserCreationService {
  MockInitialUserCreationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> createConsumer(String? id) =>
      (super.noSuchMethod(Invocation.method(#createConsumer, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> createRetailer(String? id, _i7.RetailerDTO? retailerDTO) =>
      (super.noSuchMethod(Invocation.method(#createRetailer, [id, retailerDTO]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i3.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.AddressCheckOptions> get addresses =>
      (super.noSuchMethod(Invocation.getter(#addresses),
              returnValue: <_i3.AddressCheckOptions>[])
          as List<_i3.AddressCheckOptions>);
  @override
  set addresses(List<_i3.AddressCheckOptions>? _addresses) =>
      super.noSuchMethod(Invocation.setter(#addresses, _addresses),
          returnValueForMissingStub: null);
  @override
  Duration get checkInterval =>
      (super.noSuchMethod(Invocation.getter(#checkInterval),
          returnValue: _FakeDuration()) as Duration);
  @override
  set checkInterval(Duration? _checkInterval) =>
      super.noSuchMethod(Invocation.setter(#checkInterval, _checkInterval),
          returnValueForMissingStub: null);
  @override
  _i5.Future<bool> get hasConnection =>
      (super.noSuchMethod(Invocation.getter(#hasConnection),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(Invocation.getter(#connectionStatus),
              returnValue: Future<_i3.InternetConnectionStatus>.value(
                  _i3.InternetConnectionStatus.connected))
          as _i5.Future<_i3.InternetConnectionStatus>);
  @override
  _i5.Stream<_i3.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(Invocation.getter(#onStatusChange),
              returnValue: Stream<_i3.InternetConnectionStatus>.empty())
          as _i5.Stream<_i3.InternetConnectionStatus>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get isActivelyChecking =>
      (super.noSuchMethod(Invocation.getter(#isActivelyChecking),
          returnValue: false) as bool);
  @override
  _i5.Future<_i3.AddressCheckResult> isHostReachable(
          _i3.AddressCheckOptions? options) =>
      (super.noSuchMethod(Invocation.method(#isHostReachable, [options]),
              returnValue: Future<_i3.AddressCheckResult>.value(
                  _FakeAddressCheckResult()))
          as _i5.Future<_i3.AddressCheckResult>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i2.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  _i2.UserMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeUserMetadata()) as _i2.UserMetadata);
  @override
  List<_i2.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i2.UserInfo>[]) as List<_i2.UserInfo>);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i5.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i2.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
              returnValue:
                  Future<_i2.IdTokenResult>.value(_FakeIdTokenResult()))
          as _i5.Future<_i2.IdTokenResult>);
  @override
  _i5.Future<_i2.UserCredential> linkWithCredential(
          _i2.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential()))
          as _i5.Future<_i2.UserCredential>);
  @override
  _i5.Future<_i2.ConfirmationResult> linkWithPhoneNumber(String? phoneNumber,
          [_i2.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: Future<_i2.ConfirmationResult>.value(
                  _FakeConfirmationResult()))
          as _i5.Future<_i2.ConfirmationResult>);
  @override
  _i5.Future<_i2.UserCredential> reauthenticateWithCredential(
          _i2.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential()))
          as _i5.Future<_i2.UserCredential>);
  @override
  _i5.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> sendEmailVerification(
          [_i2.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#sendEmailVerification, [actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i2.User> unlink(String? providerId) =>
      (super.noSuchMethod(Invocation.method(#unlink, [providerId]),
              returnValue: Future<_i2.User>.value(_FakeUser()))
          as _i5.Future<_i2.User>);
  @override
  _i5.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [newEmail]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [newPassword]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> updatePhoneNumber(
          _i2.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
          Invocation.method(#updatePhoneNumber, [phoneCredential]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(Invocation.method(#updateDisplayName, [displayName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(Invocation.method(#updatePhotoURL, [photoURL]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
          Invocation.method(#updateProfile, [],
              {#displayName: displayName, #photoURL: photoURL}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> verifyBeforeUpdateEmail(String? newEmail,
          [_i2.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyBeforeUpdateEmail, [newEmail, actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i2.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebaseAuthException].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthException extends _i1.Mock
    implements _i2.FirebaseAuthException {
  MockFirebaseAuthException() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get plugin =>
      (super.noSuchMethod(Invocation.getter(#plugin), returnValue: '')
          as String);
  @override
  String get code =>
      (super.noSuchMethod(Invocation.getter(#code), returnValue: '') as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ImagePickingRemoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePickingRemoteService extends _i1.Mock
    implements _i8.ImagePickingRemoteService {
  MockImagePickingRemoteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i9.File?> pickImageFromGallery() =>
      (super.noSuchMethod(Invocation.method(#pickImageFromGallery, []),
          returnValue: Future<_i9.File?>.value()) as _i5.Future<_i9.File?>);
  @override
  _i5.Future<String> uploadShopLogoToCloudStorage(
          {String? userId, _i9.File? file}) =>
      (super.noSuchMethod(
          Invocation.method(#uploadShopLogoToCloudStorage, [],
              {#userId: userId, #file: file}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> uploadProductImageToCloudStorage(
          {String? userId, String? productId, _i9.File? file}) =>
      (super.noSuchMethod(
          Invocation.method(#uploadProductImageToCloudStorage, [],
              {#userId: userId, #productId: productId, #file: file}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
}
