// Mocks generated by Mockito 5.0.12 from annotations
// in deall/test/retailer/application/retailer_edit_profile_form_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:deall/auth/application/app_user.dart' as _i8;
import 'package:deall/auth/application/auth_failure.dart' as _i9;
import 'package:deall/auth/infrastructure/auth_repository.dart' as _i7;
import 'package:deall/core/application/image_picking_failure.dart' as _i5;
import 'package:deall/core/application/retailer.dart' as _i10;
import 'package:deall/core/infrastructure/image_picking_repository.dart' as _i3;
import 'package:deall/retailer/application/retailer_failure.dart' as _i12;
import 'package:deall/retailer/infrastructure/retailer_repository.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [ImagePickingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePickingRepository extends _i1.Mock
    implements _i3.ImagePickingRepository {
  MockImagePickingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ImagePickingFailure, _i6.File>> pickImage() =>
      (super
          .noSuchMethod(Invocation.method(#pickImage, []),
              returnValue:
                  Future<_i2.Either<_i5.ImagePickingFailure, _i6.File>>.value(
                      _FakeEither<_i5.ImagePickingFailure, _i6.File>())) as _i4
          .Future<_i2.Either<_i5.ImagePickingFailure, _i6.File>>);
  @override
  _i4.Future<_i2.Either<_i5.ImagePickingFailure, String>>
      uploadShopLogoToCloudStorage({String? userId, _i6.File? file}) => (super
              .noSuchMethod(
                  Invocation.method(#uploadShopLogoToCloudStorage, [],
                      {#userId: userId, #file: file}),
                  returnValue:
                      Future<_i2.Either<_i5.ImagePickingFailure, String>>.value(
                          _FakeEither<_i5.ImagePickingFailure, String>()))
          as _i4.Future<_i2.Either<_i5.ImagePickingFailure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.ImagePickingFailure, String>>
      uploadProductImageToCloudStorage(
              {String? userId, _i6.File? file, String? productId}) =>
          (super.noSuchMethod(
                  Invocation.method(#uploadProductImageToCloudStorage, [],
                      {#userId: userId, #file: file, #productId: productId}),
                  returnValue:
                      Future<_i2.Either<_i5.ImagePickingFailure, String>>.value(
                          _FakeEither<_i5.ImagePickingFailure, String>()))
              as _i4.Future<_i2.Either<_i5.ImagePickingFailure, String>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i7.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i8.AppUser?> getFirebaseUser() => (super.noSuchMethod(
      Invocation.method(#getFirebaseUser, []),
      returnValue: Future<_i8.AppUser?>.value()) as _i4.Future<_i8.AppUser?>);
  @override
  String getUserId() =>
      (super.noSuchMethod(Invocation.method(#getUserId, []), returnValue: '')
          as String);
  @override
  _i4.Future<_i2.Either<_i9.AuthFailure, _i8.AppUser>> signIn(
          {String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signIn, [], {#email: email, #password: password}),
          returnValue: Future<_i2.Either<_i9.AuthFailure, _i8.AppUser>>.value(
              _FakeEither<_i9.AuthFailure, _i8.AppUser>())) as _i4
          .Future<_i2.Either<_i9.AuthFailure, _i8.AppUser>>);
  @override
  _i4.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>> consumerSignUp(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #consumerSignUp, [], {#email: email, #password: password}),
              returnValue: Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>.value(
                  _FakeEither<_i9.AuthFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>> retailerSignUp(
          {String? email,
          String? password,
          _i10.Retailer? retailer,
          _i6.File? imageFile}) =>
      (super.noSuchMethod(
              Invocation.method(#retailerSignUp, [], {
                #email: email,
                #password: password,
                #retailer: retailer,
                #imageFile: imageFile
              }),
              returnValue: Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>.value(
                  _FakeEither<_i9.AuthFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>.value(
                  _FakeEither<_i9.AuthFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i9.AuthFailure, _i2.Unit>>);
}

/// A class which mocks [RetailerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRetailerRepository extends _i1.Mock
    implements _i11.RetailerRepository {
  MockRetailerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i12.RetailerFailure, _i10.Retailer>> getRetailer() =>
      (super.noSuchMethod(Invocation.method(#getRetailer, []),
              returnValue:
                  Future<_i2.Either<_i12.RetailerFailure, _i10.Retailer>>.value(
                      _FakeEither<_i12.RetailerFailure, _i10.Retailer>()))
          as _i4.Future<_i2.Either<_i12.RetailerFailure, _i10.Retailer>>);
  @override
  _i4.Future<_i2.Either<_i12.RetailerFailure, _i2.Unit>> updateRetailer(
          _i10.Retailer? retailer) =>
      (super.noSuchMethod(Invocation.method(#updateRetailer, [retailer]),
          returnValue: Future<_i2.Either<_i12.RetailerFailure, _i2.Unit>>.value(
              _FakeEither<_i12.RetailerFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i12.RetailerFailure, _i2.Unit>>);
}
